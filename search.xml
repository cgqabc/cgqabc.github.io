<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>python 快速入门</title>
    <url>/2019/11/19/python%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="python-快速入门"><a href="#python-快速入门" class="headerlink" title="python 快速入门"></a>python 快速入门</h1><p>官方文档<a href="https://docs.python.org/zh-cn/3/" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/</a></p>
<h2 id="python版本"><a href="#python版本" class="headerlink" title="python版本"></a>python版本</h2><blockquote>
<p>目前最新稳定版3.7.4<br>centos7默认安装版本2.7.5 至2020年不在支持维护<br>版本区别：python3不向下兼容,<a href="https://www.runoob.com/python/python-2x-3x.html" target="_blank" rel="noopener">https://www.runoob.com/python/python-2x-3x.html</a><br>可以使用2to3模块自动转换</p>
</blockquote>
<h2 id="python-安装"><a href="#python-安装" class="headerlink" title="python 安装"></a>python 安装</h2><blockquote>
<p>Unix &amp; Linux 平台安装 Python3:<br>以下为在 Unix &amp; Linux 平台上安装 Python 的简单步骤：<br>打开WEB浏览器访问 <a href="https://www.python.org/downloads/source/" target="_blank" rel="noopener">https://www.python.org/downloads/source/</a><br>选择适用于 Unix/Linux 的源码压缩包。<br>下载及解压压缩包 Python-3.x.x.tgz，3.x.x 为你下载的对应版本号。<br>如果你需要自定义一些选项修改 Modules/Setup</p>
</blockquote>
<h3 id="以-Python3-6-1-版本为例："><a href="#以-Python3-6-1-版本为例：" class="headerlink" title="以 Python3.6.1 版本为例："></a>以 Python3.6.1 版本为例：</h3><pre><code>tar -zxvf Python-3.6.1.tgz
cd Python-3.6.1
./configure
make &amp;&amp; make install</code></pre><h3 id="检查-Python3-是否正常可用："><a href="#检查-Python3-是否正常可用：" class="headerlink" title="检查 Python3 是否正常可用："></a>检查 Python3 是否正常可用：</h3><pre><code>python3 -V
Python 3.6.1</code></pre><h2 id="python-语法"><a href="#python-语法" class="headerlink" title="python 语法"></a>python 语法</h2><h3 id="python保留字"><a href="#python保留字" class="headerlink" title="python保留字"></a>python保留字</h3><p>保留字即关键字，我们不能把它们用作任何标识符名称。Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字：</p>
<pre><code>&gt;&gt;&gt; import keyword
&gt;&gt;&gt; keyword.kwlist
[&apos;False&apos;, &apos;None&apos;, &apos;True&apos;, &apos;and&apos;, &apos;as&apos;, &apos;assert&apos;, &apos;break&apos;, &apos;class&apos;, &apos;continue&apos;, &apos;def&apos;, &apos;del&apos;, &apos;elif&apos;, &apos;else&apos;, &apos;except&apos;, &apos;finally&apos;, &apos;for&apos;, &apos;from&apos;, &apos;global&apos;, &apos;if&apos;, &apos;import&apos;, &apos;in&apos;, &apos;is&apos;, &apos;lambda&apos;, &apos;nonlocal&apos;, &apos;not&apos;, &apos;or&apos;, &apos;pass&apos;, &apos;raise&apos;, &apos;return&apos;, &apos;try&apos;, &apos;while&apos;, &apos;with&apos;, &apos;yield&apos;]</code></pre><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><pre><code>Python中单行注释以 # 开头，实例如下：</code></pre><h3 id="hello-world实例-Python-3-0"><a href="#hello-world实例-Python-3-0" class="headerlink" title="hello world实例(Python 3.0+)"></a>hello world实例(Python 3.0+)</h3><pre><code>#!/usr/bin/python3

# 第一个注释
print(&quot;Hello, Python!&quot;) # 第二个注释</code></pre><p>执行以上代码，输出结果为：</p>
<pre><code>Hello, Python!</code></pre><h3 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h3><p>python最具特色的就是使用缩进来表示代码块，不需要使用大括号 {} 。</p>
<p>缩进的空格数一般是4个。实例如下：</p>
<pre><code>实例(Python 3.0+)
if True:
    print(&quot;True&quot;)
else:
    print(&quot;False&quot;)</code></pre><p>多行语句<br>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠()来实现多行语句，例如：</p>
<pre><code>total = item_one + \
        item_two + \
        item_three</code></pre><p>在 [], {}, 或 () 中的多行语句，不需要使用反斜杠()，例如：</p>
<pre><code>total = [&apos;item_one&apos;, &apos;item_two&apos;, &apos;item_three&apos;,
        &apos;item_four&apos;, &apos;item_five&apos;]</code></pre><h2 id="python数字类型"><a href="#python数字类型" class="headerlink" title="python数字类型"></a>python数字类型</h2><blockquote>
<p>Python3 中有六个标准的数据类型：</p>
<p>Number（数字）<br>String（字符串）<br>List（列表）<br>Tuple（元组）<br>Set（集合）<br>Dictionary（字典）<br>Python3 的六个标准数据类型中：<br>不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元&gt;组）；<br>可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）。</p>
</blockquote>
<h3 id="数字-Number-类型"><a href="#数字-Number-类型" class="headerlink" title="数字(Number)类型"></a>数字(Number)类型</h3><blockquote>
<p>python中数字有四种类型：整数、布尔型、浮点数和复数。</p>
<p>int (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 &gt;python2 中的 Long。<br>bool (布尔), 如 True。<br>float (浮点数), 如 1.23、3E-2<br>complex (复数), 如 1 + 2j、 1.1 + 2.2j</p>
</blockquote>
<h3 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串(String)"></a>字符串(String)</h3><p>python中单引号和双引号使用完全相同。<br>使用三引号(‘’’或”””)可以指定一个多行字符串。</p>
<pre><code>word = &apos;字符串&apos;
sentence = &quot;这是一个句子。&quot;
paragraph = &quot;&quot;&quot;这是一个段落，
可以由多行组成&quot;&quot;&quot;</code></pre><h3 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h3><blockquote>
<p>ist（列表） 是 Python 中使用最频繁的数据类型。</p>
<p>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。</p>
<p>列表是写在方括号 [] 之间、用逗号分隔开的元素列表。</p>
<p>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</p>
<p>列表截取的语法格式如下：</p>
<p>变量[头下标:尾下标]</p>
</blockquote>
<p>实例</p>
<pre><code>#!/usr/bin/python3
list = [ &apos;abcd&apos;, 786 , 2.23, &apos;runoob&apos;, 70.2 ]
tinylist = [123, &apos;runoob&apos;]

print (list)            # 输出完整列表
print (list[0])         # 输出列表第一个元素
print (list[1:3])       # 从第二个开始输出到第三个元素
print (list[2:])        # 输出从第三个元素开始的所有元素
print (tinylist * 2)    # 输出两次列表
print (list + tinylist) # 连接列表</code></pre><p>以上实例输出结果：</p>
<pre><code>[&apos;abcd&apos;, 786, 2.23, &apos;runoob&apos;, 70.2]
abcd
[786, 2.23]
[2.23, &apos;runoob&apos;, 70.2]
[123, &apos;runoob&apos;, 123, &apos;runoob&apos;]
[&apos;abcd&apos;, 786, 2.23, &apos;runoob&apos;, 70.2, 123, &apos;runoob&apos;]</code></pre><h3 id="Tuple（元组）"><a href="#Tuple（元组）" class="headerlink" title="Tuple（元组）"></a>Tuple（元组）</h3><blockquote>
<p>元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在&gt;小括号 () 里，元素之间用逗号隔开。</p>
</blockquote>
<h3 id="Dictionary（字典）"><a href="#Dictionary（字典）" class="headerlink" title="Dictionary（字典）"></a>Dictionary（字典）</h3><blockquote>
<p>字典（dictionary）是Python中另一个非常有用的内置数据类型。</p>
<p>列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字&gt;典当中的元素是通过键来存取的，而不是通过偏移存取。</p>
<p>字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值&gt;(value) 的集合。</p>
<p>键(key)必须使用不可变类型。</p>
<p>在同一个字典中，键(key)必须是唯一的。</p>
</blockquote>
<p>实例</p>
<pre><code>#!/usr/bin/python3        
dict = {}
dict[&apos;one&apos;] = &quot;1 - 菜鸟教程&quot;
dict[2]     = &quot;2 - 菜鸟工具&quot;        
tinydict = {&apos;name&apos;: &apos;runoob&apos;,&apos;code&apos;:1, &apos;site&apos;: &apos;www.runoob.com&apos;}       </code></pre><h3 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h3><blockquote>
<p>集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物&gt;或对象称作元素或是成员。<br>基本功能是进行成员关系测试和删除重复元素。<br>实例</p>
</blockquote>
<pre><code>#!/usr/bin/python3

student = {&apos;Tom&apos;, &apos;Jim&apos;, &apos;Mary&apos;, &apos;Tom&apos;, &apos;Jack&apos;, &apos;Rose&apos;}

print(student)   # 输出集合，重复的元素被自动去掉</code></pre><h3 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h3><p>Python 条件语句是通过一条或多条语句的执行结果（True 或者 False）来决定执行的代码块</p>
<p>如下实例：</p>
<pre><code>#!/usr/bin/python3
var1 = 100
if var1:
    print (&quot;1 - if 表达式条件为 true&quot;)
    print (var1)

var2 = 0
if var2:
    print (&quot;2 - if 表达式条件为 true&quot;)
    print (var2)
print (&quot;Good bye!&quot;)</code></pre><h3 id="Python3-循环语句"><a href="#Python3-循环语句" class="headerlink" title="Python3 循环语句"></a>Python3 循环语句</h3><p>Python中的循环语句有 for 和 while。<br>实例</p>
<pre><code>#!/usr/bin/env python3      
n = 100        
sum = 0
counter = 1
while counter &lt;= n:
    sum = sum + counter
    counter += 1       
print(&quot;1 到 %d 之和为: %d&quot; % (n,sum))</code></pre><h2 id="模块的导入-import-与-from…import"><a href="#模块的导入-import-与-from…import" class="headerlink" title="模块的导入 import 与 from…import"></a>模块的导入 import 与 from…import</h2><p>在 python 用 import 或者 from…import 来导入相应的模块。</p>
<p>将整个模块(somemodule)导入，格式为： import somemodule</p>
<p>从某个模块中导入某个函数,格式为： from somemodule import somefunction</p>
<p>从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc, thirdfunc</p>
<p>将某个模块中的全部函数导入，格式为： from somemodule import *</p>
<p>导入 sys 模块</p>
<pre><code>import sys
print(&apos;================Python import mode==========================&apos;);
print (&apos;命令行参数为:&apos;)
for i in sys.argv:
    print (i)
print (&apos;\n python 路径为&apos;,sys.path)</code></pre><h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><p>很多程序可以执行一些操作来查看一些基本信息，Python可以使用-h参数查看各参数帮助信息：</p>
<pre><code>$ python -h
usage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...
Options and arguments (and corresponding environment variables):
-c cmd : program passed in as string (terminates option list)
-d     : debug output from parser (also PYTHONDEBUG=x)
-E     : ignore environment variables (such as PYTHONPATH)
-h     : print this help message and exit

[ etc. ]</code></pre><p>我们在使用脚本形式执行 Python 时，可以接收命令行输入的参数，具体使用可以参照 Python 3 命令行参数。</p>
<h2 id="运维技巧"><a href="#运维技巧" class="headerlink" title="运维技巧"></a>运维技巧</h2><h3 id="简单http服务器"><a href="#简单http服务器" class="headerlink" title="简单http服务器"></a>简单http服务器</h3><p>python2（centos默认版本）</p>
<pre><code>python -m SimpleHTTPServer 8888 .</code></pre><p>其中8888为需要暴露的端口号，.为当前目录,该http服务器只能访问，不能写入。</p>
<p>python3</p>
<pre><code>python3 -m http.server 9999 &gt;/dev/null 2&gt;&amp;1 &amp;</code></pre><h3 id="json-文件解析输出"><a href="#json-文件解析输出" class="headerlink" title="json 文件解析输出"></a>json 文件解析输出</h3><pre><code>echo &apos;{&quot;name&quot;: &quot;lucy&quot;, &quot;age&quot;: &quot;18&quot;}&apos; | python -m json.tool
or:
python -m json.tool somejson.txt</code></pre><h3 id="linux用户密码验证"><a href="#linux用户密码验证" class="headerlink" title="linux用户密码验证"></a>linux用户密码验证</h3><blockquote>
<p>crypt 模块(只用于 Unix)实现了单向的 DES 加密, Unix 系统使用这个加密算法来储存密码, 这个模块真正也就只在检查这样的密码时有用.<br>如下实例 展示了如何使用 crypt.crypt 来加密一个密码, 将密码和 salt组合起来然后传递给函数, 这里的 salt 包含两位随机字符.现在你可以扔掉原密码而只保存加密后的字符串了.</p>
</blockquote>
<p>实例</p>
<pre><code># /usr/bin/python
# -*- coding:utf-8 -*-

import crypt
import random,string

def getsalt(chars = string.letters+string.digits):
    return random.choice(chars)+random.choice(chars)

salt = getsalt()
print salt
print crypt.crypt(&apos;bananas&apos;,salt)

命令行使用：
python -c &quot;import crypt;print(crypt.crypt(&apos;123456&apos;))&quot;
输出：
$6$PiqwS47AEB/oYsFW$Yy/EVqRqazmYwJqGYQukJMHepuHWYLkqX8b10XN6VPftmUAhHFMkA8aRkMCVINBEGsLEes3JQ4TRDny/DBhfL1</code></pre><h2 id="其他常用标准库"><a href="#其他常用标准库" class="headerlink" title="其他常用标准库"></a>其他常用标准库</h2><p>官方参考 <a href="https://docs.python.org/zh-cn/3/library/index.html" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/index.html</a></p>
<ul>
<li>os — 操作系统接口模块</li>
<li>os.path — 常见路径操作</li>
<li>sys — 系统相关的参数和函数</li>
<li>time — 时间的访问和转换</li>
<li>datetime — 基础 日期 和 时间 数据类型</li>
<li>re  — 正则表达式操作</li>
<li>gzip — 对 gzip 格式的支持</li>
<li>threading — 基于线程的并行</li>
<li>multiprocessing — 基于进程的并行</li>
<li>asyncio — 异步 I/O</li>
<li>socket — 底层网络接口</li>
<li>email — 电子邮件与 MIME 处理包</li>
<li>json — JSON 编码和解码器</li>
<li>base64 — Base16, Base32, Base64, Base85 数据编码</li>
<li>urllib — URL 处理模块</li>
<li>urllib.request — 用于打开 URL 的可扩展库</li>
</ul>
]]></content>
      <categories>
        <category>培训</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/11/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
