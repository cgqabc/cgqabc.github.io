<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2019/11/19/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<p><img src="/images/demo.jfif" alt="alt text" title="Image demo"></p>
]]></content>
  </entry>
  <entry>
    <title>docker 1.13使用devicemapper存储安装</title>
    <url>/2019/11/19/docker1.13%E4%BD%BF%E7%94%A8devicemapper%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<h1 id="docker-1-13使用devicemapper存储安装"><a href="#docker-1-13使用devicemapper存储安装" class="headerlink" title="docker 1.13使用devicemapper存储安装"></a>docker 1.13使用devicemapper存储安装</h1><h2 id="无需重启识别硬盘"><a href="#无需重启识别硬盘" class="headerlink" title="无需重启识别硬盘"></a>无需重启识别硬盘</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">echo &quot;- - -&quot; &gt; /sys/class/scsi_host/host0/scan</span><br><span class="line">echo &quot;- - -&quot; &gt; /sys/class/scsi_host/host1/scan</span><br><span class="line">echo &quot;- - -&quot; &gt; /sys/class/scsi_host/host2/scan</span><br><span class="line"></span><br><span class="line">`</span><br></pre></td></tr></table></figure>

<h2 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">set -e</span><br><span class="line">command_exists() &#123;</span><br><span class="line">  command -v &quot;$@&quot; &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$1&quot; ];</span><br><span class="line">then</span><br><span class="line">    echo &apos;Error: you should install with params, like:&apos;</span><br><span class="line">    echo &apos;sh update-docker-devicemapper.sh /dev/sdb&apos;</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br><span class="line">if ! command_exists docker; then</span><br><span class="line">    echo &gt;&amp;2 &apos;Error: this installer needs docker. You should install docker first.&apos;</span><br><span class="line">    echo &apos;please use command sh install-docker.sh [k8s-master-ip]&apos;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;###############install disk $1...#########################&quot;</span><br><span class="line">fdisk $1&lt;&lt;EOF   </span><br><span class="line">n               #创建主分区  </span><br><span class="line">p</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">w  </span><br><span class="line">EOF</span><br><span class="line">_arg=$1&quot;1&quot;</span><br><span class="line">pvcreate $_arg</span><br><span class="line">vgcreate docker $_arg</span><br><span class="line">lvcreate --wipesignatures y -n thinpool docker -l 95%VG</span><br><span class="line">lvcreate --wipesignatures y -n thinpoolmeta docker -l 1%VG</span><br><span class="line">lvconvert -y --zero n -c 512K --thinpool docker/thinpool --poolmetadata docker/thinpoolmeta</span><br><span class="line">cat &gt; /etc/lvm/profile/docker-thinpool.profile &lt;&lt;EOF</span><br><span class="line">activation &#123;</span><br><span class="line">  thin_pool_autoextend_threshold=80</span><br><span class="line">  thin_pool_autoextend_percent=20</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">lvchange --metadataprofile docker-thinpool docker/thinpool</span><br><span class="line">lvs -o+seg_monitor</span><br><span class="line">echo &quot;###############config docker.service and restart...#################&quot;</span><br><span class="line">cp /usr/lib/systemd/system/docker.service  /usr/lib/systemd/system/docker.service.bak</span><br><span class="line">cat &gt; /usr/lib/systemd/system/docker.service &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Docker Application Container Engine</span><br><span class="line">Documentation=https://docs.docker.com</span><br><span class="line">After=network.target firewalld.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line"># the default is not to use systemd for cgroups because the delegate issues still</span><br><span class="line"># exists and systemd currently does not support the cgroup feature set required</span><br><span class="line"># for containers run by docker</span><br><span class="line">ExecStart=/usr/bin/dockerd \$OPTIONS \\</span><br><span class="line">--storage-driver=devicemapper \\</span><br><span class="line">--storage-opt=dm.thinpooldev=/dev/mapper/docker-thinpool \\</span><br><span class="line">--storage-opt=dm.use_deferred_removal=true \\</span><br><span class="line">--storage-opt=dm.use_deferred_deletion=true</span><br><span class="line">ExecReload=/bin/kill -s HUP \$MAINPID</span><br><span class="line"># Having non-zero Limit*s causes performance problems due to accounting overhead</span><br><span class="line"># in the kernel. We recommend using cgroups to do container-local accounting.</span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line"># Uncomment TasksMax if your systemd version supports it.</span><br><span class="line"># Only systemd 226 and above support this version.</span><br><span class="line">#TasksMax=infinity</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line"># set delegate yes so that systemd does not reset the cgroups of docker containers</span><br><span class="line">Delegate=yes</span><br><span class="line"># kill only the docker process, not all processes in the cgroup</span><br><span class="line">KillMode=process</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>docker</category>
        <category>存储</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>git简洁操作手册</title>
    <url>/2019/11/19/git%E5%BF%AB%E6%8D%B7%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="git简洁操作手册"><a href="#git简洁操作手册" class="headerlink" title="git简洁操作手册"></a>git简洁操作手册</h1><p>常用 Git 命令清单</p>
<p>Workspace：工作区<br>Index / Stage：暂存区<br>Repository：仓库区（或本地仓库）<br>Remote：远程仓库</p>
<h2 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h2><h3 id="在当前目录新建一个Git代码库"><a href="#在当前目录新建一个Git代码库" class="headerlink" title="在当前目录新建一个Git代码库"></a>在当前目录新建一个Git代码库</h3><p><code>$ git init</code></p>
<h3 id="新建一个目录，将其初始化为Git代码库"><a href="#新建一个目录，将其初始化为Git代码库" class="headerlink" title="新建一个目录，将其初始化为Git代码库"></a>新建一个目录，将其初始化为Git代码库</h3><p><code>$ git init [project-name]</code></p>
<h3 id="下载一个项目和它的整个代码历史"><a href="#下载一个项目和它的整个代码历史" class="headerlink" title="下载一个项目和它的整个代码历史"></a>下载一个项目和它的整个代码历史</h3><p><code>$ git clone [url]</code></p>
<h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><p> Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<h3 id="显示当前的Git配置"><a href="#显示当前的Git配置" class="headerlink" title="显示当前的Git配置"></a>显示当前的Git配置</h3><p><code>$ git config --list</code></p>
<h3 id="编辑Git配置文件"><a href="#编辑Git配置文件" class="headerlink" title="编辑Git配置文件"></a>编辑Git配置文件</h3><p><code>$ git config -e [--global]</code></p>
<h3 id="设置提交代码时的用户信息"><a href="#设置提交代码时的用户信息" class="headerlink" title="设置提交代码时的用户信息"></a>设置提交代码时的用户信息</h3><p><code>$ git config [--global] user.name &quot;[name]&quot;</code><br><code>$ git config [--global] user.email &quot;[email address]&quot;</code></p>
<h2 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h2><h3 id="添加指定文件到暂存区"><a href="#添加指定文件到暂存区" class="headerlink" title="添加指定文件到暂存区"></a>添加指定文件到暂存区</h3><p><code>$ git add [file1] [file2] ...</code></p>
<h3 id="添加指定目录到暂存区，包括子目录"><a href="#添加指定目录到暂存区，包括子目录" class="headerlink" title="添加指定目录到暂存区，包括子目录"></a>添加指定目录到暂存区，包括子目录</h3><p><code>$ git add [dir]</code></p>
<h3 id="添加当前目录的所有文件到暂存区"><a href="#添加当前目录的所有文件到暂存区" class="headerlink" title="添加当前目录的所有文件到暂存区"></a>添加当前目录的所有文件到暂存区</h3><p><code>$ git add .</code></p>
<h3 id="添加每个变化前，都会要求确认-对于同一个文件的多处变化，可以实现分次提交"><a href="#添加每个变化前，都会要求确认-对于同一个文件的多处变化，可以实现分次提交" class="headerlink" title="添加每个变化前，都会要求确认,对于同一个文件的多处变化，可以实现分次提交"></a>添加每个变化前，都会要求确认,对于同一个文件的多处变化，可以实现分次提交</h3><p><code>$ git add -p</code></p>
<h3 id="删除工作区文件，并且将这次删除放入暂存区"><a href="#删除工作区文件，并且将这次删除放入暂存区" class="headerlink" title="删除工作区文件，并且将这次删除放入暂存区"></a>删除工作区文件，并且将这次删除放入暂存区</h3><p><code>$ git rm [file1] [file2] ...</code></p>
<h3 id="停止追踪指定文件，但该文件会保留在工作区"><a href="#停止追踪指定文件，但该文件会保留在工作区" class="headerlink" title="停止追踪指定文件，但该文件会保留在工作区"></a>停止追踪指定文件，但该文件会保留在工作区</h3><p><code>$ git rm --cached [file]</code></p>
<h3 id="改名文件，并且将这个改名放入暂存区"><a href="#改名文件，并且将这个改名放入暂存区" class="headerlink" title="改名文件，并且将这个改名放入暂存区"></a>改名文件，并且将这个改名放入暂存区</h3><p><code>$ git mv [file-original] [file-renamed]</code></p>
<h2 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h2><h3 id="提交暂存区到仓库区"><a href="#提交暂存区到仓库区" class="headerlink" title="提交暂存区到仓库区"></a>提交暂存区到仓库区</h3><p><code>$ git commit -m [message]</code></p>
<h3 id="提交暂存区的指定文件到仓库区"><a href="#提交暂存区的指定文件到仓库区" class="headerlink" title="提交暂存区的指定文件到仓库区"></a>提交暂存区的指定文件到仓库区</h3><p><code>$ git commit [file1] [file2] ... -m [message]</code></p>
<h3 id="提交工作区自上次commit之后的变化，直接到仓库区"><a href="#提交工作区自上次commit之后的变化，直接到仓库区" class="headerlink" title="提交工作区自上次commit之后的变化，直接到仓库区"></a>提交工作区自上次commit之后的变化，直接到仓库区</h3><p><code>$ git commit -a</code></p>
<h3 id="提交时显示所有diff信息"><a href="#提交时显示所有diff信息" class="headerlink" title="提交时显示所有diff信息"></a>提交时显示所有diff信息</h3><p><code>$ git commit -v</code></p>
<h3 id="使用一次新的commit，替代上一次提交"><a href="#使用一次新的commit，替代上一次提交" class="headerlink" title="使用一次新的commit，替代上一次提交"></a>使用一次新的commit，替代上一次提交</h3><h3 id="如果代码没有任何新变化，则用来改写上一次commit的提交信息"><a href="#如果代码没有任何新变化，则用来改写上一次commit的提交信息" class="headerlink" title="如果代码没有任何新变化，则用来改写上一次commit的提交信息"></a>如果代码没有任何新变化，则用来改写上一次commit的提交信息</h3><p><code>$ git commit --amend -m [message]</code></p>
<h3 id="重做上一次commit，并包括指定文件的新变化"><a href="#重做上一次commit，并包括指定文件的新变化" class="headerlink" title="重做上一次commit，并包括指定文件的新变化"></a>重做上一次commit，并包括指定文件的新变化</h3><p><code>$ git commit --amend [file1] [file2] ...</code></p>
<h2 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h2><h3 id="列出所有本地分支"><a href="#列出所有本地分支" class="headerlink" title="列出所有本地分支"></a>列出所有本地分支</h3><p><code>$ git branch</code></p>
<h3 id="列出所有远程分支"><a href="#列出所有远程分支" class="headerlink" title="列出所有远程分支"></a>列出所有远程分支</h3><p><code>$ git branch -r</code></p>
<h3 id="列出所有本地分支和远程分支"><a href="#列出所有本地分支和远程分支" class="headerlink" title="列出所有本地分支和远程分支"></a>列出所有本地分支和远程分支</h3><p><code>$ git branch -a</code></p>
<h3 id="新建一个分支，但依然停留在当前分支"><a href="#新建一个分支，但依然停留在当前分支" class="headerlink" title="新建一个分支，但依然停留在当前分支"></a>新建一个分支，但依然停留在当前分支</h3><p><code>$ git branch [branch-name]</code></p>
<h3 id="新建一个分支，并切换到该分支"><a href="#新建一个分支，并切换到该分支" class="headerlink" title="新建一个分支，并切换到该分支"></a>新建一个分支，并切换到该分支</h3><p><code>$ git checkout -b [branch]</code></p>
<h3 id="新建一个分支，指向指定commit"><a href="#新建一个分支，指向指定commit" class="headerlink" title="新建一个分支，指向指定commit"></a>新建一个分支，指向指定commit</h3><p><code>$ git branch [branch] [commit]</code></p>
<h3 id="新建一个分支，与指定的远程分支建立追踪关系"><a href="#新建一个分支，与指定的远程分支建立追踪关系" class="headerlink" title="新建一个分支，与指定的远程分支建立追踪关系"></a>新建一个分支，与指定的远程分支建立追踪关系</h3><p><code>$ git branch --track [branch] [remote-branch]</code></p>
<h3 id="切换到指定分支，并更新工作区"><a href="#切换到指定分支，并更新工作区" class="headerlink" title="切换到指定分支，并更新工作区"></a>切换到指定分支，并更新工作区</h3><p><code>$ git checkout [branch-name]</code></p>
<h3 id="切换到上一个分支"><a href="#切换到上一个分支" class="headerlink" title="切换到上一个分支"></a>切换到上一个分支</h3><p><code>$ git checkout -</code></p>
<h3 id="建立追踪关系，在现有分支与指定的远程分支之间"><a href="#建立追踪关系，在现有分支与指定的远程分支之间" class="headerlink" title="建立追踪关系，在现有分支与指定的远程分支之间"></a>建立追踪关系，在现有分支与指定的远程分支之间</h3><p><code>$ git branch --set-upstream [branch] [remote-branch]</code></p>
<h3 id="合并指定分支到当前分支"><a href="#合并指定分支到当前分支" class="headerlink" title="合并指定分支到当前分支"></a>合并指定分支到当前分支</h3><p><code>$ git merge [branch]</code></p>
<h3 id="选择一个commit，合并进当前分支"><a href="#选择一个commit，合并进当前分支" class="headerlink" title="选择一个commit，合并进当前分支"></a>选择一个commit，合并进当前分支</h3><p><code>$ git cherry-pick [commit]</code></p>
<h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><p><code>$ git branch -d [branch-name]</code></p>
<h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><p><code>$ git push origin --delete [branch-name]</code><br><code>$ git branch -dr [remote/branch]</code></p>
<h2 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h2><h3 id="列出所有tag"><a href="#列出所有tag" class="headerlink" title="列出所有tag"></a>列出所有tag</h3><p><code>$ git tag</code></p>
<h3 id="新建一个tag在当前commit"><a href="#新建一个tag在当前commit" class="headerlink" title="新建一个tag在当前commit"></a>新建一个tag在当前commit</h3><p><code>$ git tag [tag]</code></p>
<h3 id="新建一个tag在指定commit"><a href="#新建一个tag在指定commit" class="headerlink" title="新建一个tag在指定commit"></a>新建一个tag在指定commit</h3><p><code>$ git tag [tag] [commit]</code></p>
<h3 id="删除本地tag"><a href="#删除本地tag" class="headerlink" title="删除本地tag"></a>删除本地tag</h3><p><code>$ git tag -d [tag]</code></p>
<h3 id="删除远程tag"><a href="#删除远程tag" class="headerlink" title="删除远程tag"></a>删除远程tag</h3><p><code>$ git push origin :refs/tags/[tagName]</code></p>
<h3 id="查看tag信息"><a href="#查看tag信息" class="headerlink" title="查看tag信息"></a>查看tag信息</h3><p><code>$ git show [tag]</code></p>
<h3 id="提交指定tag"><a href="#提交指定tag" class="headerlink" title="提交指定tag"></a>提交指定tag</h3><p><code>$ git push [remote] [tag]</code></p>
<h3 id="提交所有tag"><a href="#提交所有tag" class="headerlink" title="提交所有tag"></a>提交所有tag</h3><p><code>$ git push [remote] --tags</code></p>
<h3 id="新建一个分支，指向某个tag"><a href="#新建一个分支，指向某个tag" class="headerlink" title="新建一个分支，指向某个tag"></a>新建一个分支，指向某个tag</h3><p><code>$ git checkout -b [branch] [tag]</code></p>
<h2 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h2><h3 id="显示有变更的文件"><a href="#显示有变更的文件" class="headerlink" title="显示有变更的文件"></a>显示有变更的文件</h3><p><code>$ git status</code></p>
<h3 id="显示当前分支的版本历史"><a href="#显示当前分支的版本历史" class="headerlink" title="显示当前分支的版本历史"></a>显示当前分支的版本历史</h3><p><code>$ git log</code></p>
<h3 id="显示commit历史，以及每次commit发生变更的文件"><a href="#显示commit历史，以及每次commit发生变更的文件" class="headerlink" title="显示commit历史，以及每次commit发生变更的文件"></a>显示commit历史，以及每次commit发生变更的文件</h3><p><code>$ git log --stat</code></p>
<h3 id="搜索提交历史，根据关键词"><a href="#搜索提交历史，根据关键词" class="headerlink" title="搜索提交历史，根据关键词"></a>搜索提交历史，根据关键词</h3><p><code>$ git log -S [keyword]</code></p>
<h3 id="显示某个commit之后的所有变动，每个commit占据一行"><a href="#显示某个commit之后的所有变动，每个commit占据一行" class="headerlink" title="显示某个commit之后的所有变动，每个commit占据一行"></a>显示某个commit之后的所有变动，每个commit占据一行</h3><p><code>$ git log [tag] HEAD --pretty=format:%s</code></p>
<h3 id="显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件"><a href="#显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件" class="headerlink" title="显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件"></a>显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件</h3><p><code>$ git log [tag] HEAD --grep feature</code></p>
<h3 id="显示某个文件的版本历史，包括文件改名"><a href="#显示某个文件的版本历史，包括文件改名" class="headerlink" title="显示某个文件的版本历史，包括文件改名"></a>显示某个文件的版本历史，包括文件改名</h3><p><code>$ git log --follow [file]
$ git whatchanged [file]</code></p>
<h3 id="显示指定文件相关的每一次diff"><a href="#显示指定文件相关的每一次diff" class="headerlink" title="显示指定文件相关的每一次diff"></a>显示指定文件相关的每一次diff</h3><p><code>$ git log -p [file]</code></p>
<h3 id="显示过去5次提交"><a href="#显示过去5次提交" class="headerlink" title="显示过去5次提交"></a>显示过去5次提交</h3><p><code>$ git log -5 --pretty --oneline</code></p>
<h3 id="显示所有提交过的用户，按提交次数排序"><a href="#显示所有提交过的用户，按提交次数排序" class="headerlink" title="显示所有提交过的用户，按提交次数排序"></a>显示所有提交过的用户，按提交次数排序</h3><p><code>$ git shortlog -sn</code></p>
<h3 id="显示指定文件是什么人在什么时间修改过"><a href="#显示指定文件是什么人在什么时间修改过" class="headerlink" title="显示指定文件是什么人在什么时间修改过"></a>显示指定文件是什么人在什么时间修改过</h3><p><code>$ git blame [file]</code></p>
<h3 id="显示暂存区和工作区的差异"><a href="#显示暂存区和工作区的差异" class="headerlink" title="显示暂存区和工作区的差异"></a>显示暂存区和工作区的差异</h3><p><code>$ git diff</code></p>
<h3 id="显示暂存区和上一个commit的差异"><a href="#显示暂存区和上一个commit的差异" class="headerlink" title="显示暂存区和上一个commit的差异"></a>显示暂存区和上一个commit的差异</h3><p><code>$ git diff --cached [file]</code></p>
<h3 id="显示工作区与当前分支最新commit之间的差异"><a href="#显示工作区与当前分支最新commit之间的差异" class="headerlink" title="显示工作区与当前分支最新commit之间的差异"></a>显示工作区与当前分支最新commit之间的差异</h3><p><code>$ git diff HEAD</code></p>
<h3 id="显示两次提交之间的差异"><a href="#显示两次提交之间的差异" class="headerlink" title="显示两次提交之间的差异"></a>显示两次提交之间的差异</h3><p><code>$ git diff [first-branch]...[second-branch]</code></p>
<h3 id="显示今天你写了多少行代码"><a href="#显示今天你写了多少行代码" class="headerlink" title="显示今天你写了多少行代码"></a>显示今天你写了多少行代码</h3><p><code>$ git diff --shortstat &quot;@{0 day ago}&quot;</code></p>
<h3 id="显示某次提交的元数据和内容变化"><a href="#显示某次提交的元数据和内容变化" class="headerlink" title="显示某次提交的元数据和内容变化"></a>显示某次提交的元数据和内容变化</h3><p><code>$ git show [commit]</code></p>
<h3 id="显示某次提交发生变化的文件"><a href="#显示某次提交发生变化的文件" class="headerlink" title="显示某次提交发生变化的文件"></a>显示某次提交发生变化的文件</h3><p><code>$ git show --name-only [commit]</code></p>
<h3 id="显示某次提交时，某个文件的内容"><a href="#显示某次提交时，某个文件的内容" class="headerlink" title="显示某次提交时，某个文件的内容"></a>显示某次提交时，某个文件的内容</h3><p><code>$ git show [commit]:[filename]</code></p>
<h3 id="显示当前分支的最近几次提交"><a href="#显示当前分支的最近几次提交" class="headerlink" title="显示当前分支的最近几次提交"></a>显示当前分支的最近几次提交</h3><p><code>$ git reflog</code></p>
<h2 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h2><h3 id="下载远程仓库的所有变动"><a href="#下载远程仓库的所有变动" class="headerlink" title="下载远程仓库的所有变动"></a>下载远程仓库的所有变动</h3><p><code>$ git fetch [remote]</code></p>
<h3 id="显示所有远程仓库"><a href="#显示所有远程仓库" class="headerlink" title="显示所有远程仓库"></a>显示所有远程仓库</h3><p><code>$ git remote -v</code></p>
<h3 id="显示某个远程仓库的信息"><a href="#显示某个远程仓库的信息" class="headerlink" title="显示某个远程仓库的信息"></a>显示某个远程仓库的信息</h3><p><code>$ git remote show [remote]</code></p>
<h3 id="增加一个新的远程仓库，并命名"><a href="#增加一个新的远程仓库，并命名" class="headerlink" title="增加一个新的远程仓库，并命名"></a>增加一个新的远程仓库，并命名</h3><p><code>$ git remote add [shortname] [url]</code></p>
<h3 id="取回远程仓库的变化，并与本地分支合并"><a href="#取回远程仓库的变化，并与本地分支合并" class="headerlink" title="取回远程仓库的变化，并与本地分支合并"></a>取回远程仓库的变化，并与本地分支合并</h3><p><code>$ git pull [remote] [branch]</code></p>
<h3 id="上传本地指定分支到远程仓库"><a href="#上传本地指定分支到远程仓库" class="headerlink" title="上传本地指定分支到远程仓库"></a>上传本地指定分支到远程仓库</h3><p><code>$ git push [remote] [branch]</code></p>
<h3 id="强行推送当前分支到远程仓库，即使有冲突"><a href="#强行推送当前分支到远程仓库，即使有冲突" class="headerlink" title="强行推送当前分支到远程仓库，即使有冲突"></a>强行推送当前分支到远程仓库，即使有冲突</h3><p><code>$ git push [remote] --force</code></p>
<h3 id="推送所有分支到远程仓库"><a href="#推送所有分支到远程仓库" class="headerlink" title="推送所有分支到远程仓库"></a>推送所有分支到远程仓库</h3><p><code>$ git push [remote] --all</code></p>
<h2 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h2><h3 id="恢复暂存区的指定文件到工作区"><a href="#恢复暂存区的指定文件到工作区" class="headerlink" title="恢复暂存区的指定文件到工作区"></a>恢复暂存区的指定文件到工作区</h3><p><code>$ git checkout [file]</code></p>
<h3 id="恢复某个commit的指定文件到暂存区和工作区"><a href="#恢复某个commit的指定文件到暂存区和工作区" class="headerlink" title="恢复某个commit的指定文件到暂存区和工作区"></a>恢复某个commit的指定文件到暂存区和工作区</h3><p><code>$ git checkout [commit] [file]</code></p>
<h3 id="恢复暂存区的所有文件到工作区"><a href="#恢复暂存区的所有文件到工作区" class="headerlink" title="恢复暂存区的所有文件到工作区"></a>恢复暂存区的所有文件到工作区</h3><p><code>$ git checkout .</code></p>
<h3 id="重置暂存区的指定文件，与上一次commit保持一致，但工作区不变"><a href="#重置暂存区的指定文件，与上一次commit保持一致，但工作区不变" class="headerlink" title="重置暂存区的指定文件，与上一次commit保持一致，但工作区不变"></a>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</h3><p><code>$ git reset [file]</code></p>
<h3 id="重置暂存区与工作区，与上一次commit保持一致"><a href="#重置暂存区与工作区，与上一次commit保持一致" class="headerlink" title="重置暂存区与工作区，与上一次commit保持一致"></a>重置暂存区与工作区，与上一次commit保持一致</h3><p><code>$ git reset --hard</code></p>
<h3 id="重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变"><a href="#重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变" class="headerlink" title="重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变"></a>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</h3><p><code>$ git reset [commit]</code></p>
<h3 id="重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致"><a href="#重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致" class="headerlink" title="重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致"></a>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</h3><p><code>$ git reset --hard [commit]</code></p>
<h3 id="重置当前HEAD为指定commit，但保持暂存区和工作区不变"><a href="#重置当前HEAD为指定commit，但保持暂存区和工作区不变" class="headerlink" title="重置当前HEAD为指定commit，但保持暂存区和工作区不变"></a>重置当前HEAD为指定commit，但保持暂存区和工作区不变</h3><p><code>$ git reset --keep [commit]</code></p>
<h3 id="新建一个commit，用来撤销指定commit"><a href="#新建一个commit，用来撤销指定commit" class="headerlink" title="新建一个commit，用来撤销指定commit"></a>新建一个commit，用来撤销指定commit</h3><h3 id="后者的所有变化都将被前者抵消，并且应用到当前分支"><a href="#后者的所有变化都将被前者抵消，并且应用到当前分支" class="headerlink" title="后者的所有变化都将被前者抵消，并且应用到当前分支"></a>后者的所有变化都将被前者抵消，并且应用到当前分支</h3><p><code>$ git revert [commit]</code></p>
<h3 id="暂时将未提交的变化移除，稍后再移入"><a href="#暂时将未提交的变化移除，稍后再移入" class="headerlink" title="暂时将未提交的变化移除，稍后再移入"></a>暂时将未提交的变化移除，稍后再移入</h3><p><code>$ git stash</code><br><code>$ git stash pop</code></p>
<h2 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h2><h3 id="生成一个可供发布的压缩包"><a href="#生成一个可供发布的压缩包" class="headerlink" title="生成一个可供发布的压缩包"></a>生成一个可供发布的压缩包</h3><p><code>$ git archive</code></p>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>VIM快捷操作</title>
    <url>/2019/11/19/vim%E5%BF%AB%E6%8D%B7%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="VIM快捷操作"><a href="#VIM快捷操作" class="headerlink" title="VIM快捷操作"></a>VIM快捷操作</h1><h2 id="1、移动："><a href="#1、移动：" class="headerlink" title="1、移动："></a>1、移动：</h2><ul>
<li>gg  到第一行</li>
<li>NG  到第N行，如5G，也可以写成:5，到第五行</li>
<li>G   到最后一行</li>
<li>0   数字零，到行头</li>
<li>^   到本行第一个不是blank字符的位置（所谓+ + blank字符就是空格，tab，换行，回车等）</li>
<li>$   到本行行尾</li>
<li>g_  到本行最后一个不是blank字符的位置</li>
<li>w   到下一个单词的开头 如果单词是有blank等字符+ 分割，那需要使用W大写</li>
<li>e   到下一个单词的结尾 如果单词是有blank等字符+ 分割，那需要使用E大写 </li>
<li>%   匹配括号移动，包括(,[,{,需要把光标移动到括+ 号上)</li>
<li><em>和# 匹配光标当前所在的单词，移动光标到下一个或+ 上一个。</em>是下一个，#是上一个</li>
<li>0y$ 表示从行头拷贝到本行最后一个字符</li>
<li>fa  到下一个为a的字符处，已可以fs到下个s的字符</li>
<li>t,  到逗号前的第一个字符，逗号可以变成其他字符</li>
<li>3fa 在当前行查找第三个出现的a</li>
<li>dt” 删除所有的内容，直到遇到双引号”`</li>
</ul>
<h2 id="2、操作"><a href="#2、操作" class="headerlink" title="2、操作"></a>2、操作</h2><ul>
<li>r  替换</li>
<li>y  拷贝，yy拷贝当行</li>
<li>v  可视化的选择</li>
<li>P  粘贴在当前位置之前，小p表示粘贴在当前位置之+ 后</li>
<li>d  删除，dd删除本行（剪切）</li>
<li>gU 变大写</li>
<li>gu 变小写 </li>
<li>a  在光标后插入</li>
<li>i  在光标前插入</li>
<li>o  在当前行后插入一个新行</li>
<li>O  大写o在当前行前面插入一个新行</li>
<li>cw 替换从光标所在位置到最后一个单词结尾的字符</li>
<li>.  小数点，可以重复上一次命令</li>
<li>N<command> 重复某个命令N次，如3p粘贴3次，2dd删+ 除2行<h2 id="3、文件打开退出"><a href="#3、文件打开退出" class="headerlink" title="3、文件打开退出"></a>3、文件打开退出</h2></li>
<li>:e  打开一个文件</li>
<li>:w  保存</li>
<li>:saveas 另存为</li>
<li>:x,ZZ或wq  保存并退出，ZZ不需要输入冒号和回车</li>
<li>:q! 退出不保存，:qa!强制退出</li>
<li>:bn 和 :bq 打开多个文件时切换上下文件，:n到下一+ 个文件  <h2 id="4、区域选择"><a href="#4、区域选择" class="headerlink" title="4、区域选择"></a>4、区域选择</h2>action&gt;a<object> 和 <action>i<object><br>action可以是任何的命令，如 d (删除), y (拷贝), v (可以视模式选择)<br>object 可能是： w 一个单词， W 一个以空格为分隔的单词， s 一个句字， p 一个段落。也可以是一个特别的字符：”、 ‘、 )、 }、 ]<br>a是包括对象，i是不包括对象 </li>
</ul>
<h2 id="5、块操作"><a href="#5、块操作" class="headerlink" title="5、块操作"></a>5、块操作</h2><p>   ctrl + q (windows环境）或 ctrl + v （linux环境）<br>   如 0  ctrl+q I– [esc]<br>   输入0到行首，ctrl+q进入块操作，移动光标选择，I–插入”–”,按esc键让每行都生效<br>   在后面插入则A–</p>
<h2 id="6、自动提示"><a href="#6、自动提示" class="headerlink" title="6、自动提示"></a>6、自动提示</h2><p>   ctrl + n和ctrl + p 在输入模式下，已经输入过的单词可用这个自动补齐</p>
<h2 id="7、可视化操作"><a href="#7、可视化操作" class="headerlink" title="7、可视化操作"></a>7、可视化操作</h2><p>   用v（可按alt选某列）或V（整行操作）或ctrl+q（v）进入可视化操作后，选中操作行后可以执行<br>   J 把所有行连接起来变成一行<br>   &lt;或&gt; 左右缩进<br>   = 自动给缩进</p>
<h2 id="8、分屏"><a href="#8、分屏" class="headerlink" title="8、分屏"></a>8、分屏</h2><ul>
<li>:split  创建分屏，:vsplit 创建垂直分屏</li>
<li>ctrl+w + 方向，用来切换分屏</li>
<li>ctrl+w + _或| 最大化尺寸 |垂直分屏</li>
<li>ctrl+w + +或- 增加尺寸<h2 id="9、其他操作"><a href="#9、其他操作" class="headerlink" title="9、其他操作"></a>9、其他操作</h2></li>
<li>:set ff=dos 或ulinx 设置文件格式</li>
<li>:set fileencoding=utf-8 设置文件编码</li>
<li>:set list 设置显示模式，显示特殊符号</li>
<li>:ga 显示所在字符的ascii值，分别以十进制，十六进+ 制，八进制表示。</li>
<li>:% s/test/alan/g 全局替换，:% s#/app/log#/+ app/pty#g</li>
<li>全局替换路径，用#隔开，也可以用其他符号</li>
<li>u 撤销，uu恢复初始状态，ctrl+r 重做，恢复撤销的命令<br>在ggVG可视模块话操作下，直接按’=’可以自动缩进，实现代码格式化。python不建议使用</li>
</ul>
]]></content>
      <categories>
        <category>tool</category>
        <category>linux</category>
        <category>vim</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>python 快速入门</title>
    <url>/2019/11/19/python%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="python-快速入门"><a href="#python-快速入门" class="headerlink" title="python 快速入门"></a>python 快速入门</h1><p>官方文档<a href="https://docs.python.org/zh-cn/3/" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/</a></p>
<h2 id="python版本"><a href="#python版本" class="headerlink" title="python版本"></a>python版本</h2><blockquote>
<p>目前最新稳定版3.7.4<br>centos7默认安装版本2.7.5 至2020年不在支持维护<br>版本区别：python3不向下兼容,<a href="https://www.runoob.com/python/python-2x-3x.html" target="_blank" rel="noopener">https://www.runoob.com/python/python-2x-3x.html</a><br>可以使用2to3模块自动转换</p>
</blockquote>
<h2 id="python-安装"><a href="#python-安装" class="headerlink" title="python 安装"></a>python 安装</h2><blockquote>
<p>Unix &amp; Linux 平台安装 Python3:<br>以下为在 Unix &amp; Linux 平台上安装 Python 的简单步骤：<br>打开WEB浏览器访问 <a href="https://www.python.org/downloads/source/" target="_blank" rel="noopener">https://www.python.org/downloads/source/</a><br>选择适用于 Unix/Linux 的源码压缩包。<br>下载及解压压缩包 Python-3.x.x.tgz，3.x.x 为你下载的对应版本号。<br>如果你需要自定义一些选项修改 Modules/Setup</p>
</blockquote>
<h3 id="以-Python3-6-1-版本为例："><a href="#以-Python3-6-1-版本为例：" class="headerlink" title="以 Python3.6.1 版本为例："></a>以 Python3.6.1 版本为例：</h3><pre><code>tar -zxvf Python-3.6.1.tgz
cd Python-3.6.1
./configure
make &amp;&amp; make install</code></pre><h3 id="检查-Python3-是否正常可用："><a href="#检查-Python3-是否正常可用：" class="headerlink" title="检查 Python3 是否正常可用："></a>检查 Python3 是否正常可用：</h3><pre><code>python3 -V
Python 3.6.1</code></pre><h2 id="python-语法"><a href="#python-语法" class="headerlink" title="python 语法"></a>python 语法</h2><h3 id="python保留字"><a href="#python保留字" class="headerlink" title="python保留字"></a>python保留字</h3><p>保留字即关键字，我们不能把它们用作任何标识符名称。Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字：</p>
<pre><code>&gt;&gt;&gt; import keyword
&gt;&gt;&gt; keyword.kwlist
[&apos;False&apos;, &apos;None&apos;, &apos;True&apos;, &apos;and&apos;, &apos;as&apos;, &apos;assert&apos;, &apos;break&apos;, &apos;class&apos;, &apos;continue&apos;, &apos;def&apos;, &apos;del&apos;, &apos;elif&apos;, &apos;else&apos;, &apos;except&apos;, &apos;finally&apos;, &apos;for&apos;, &apos;from&apos;, &apos;global&apos;, &apos;if&apos;, &apos;import&apos;, &apos;in&apos;, &apos;is&apos;, &apos;lambda&apos;, &apos;nonlocal&apos;, &apos;not&apos;, &apos;or&apos;, &apos;pass&apos;, &apos;raise&apos;, &apos;return&apos;, &apos;try&apos;, &apos;while&apos;, &apos;with&apos;, &apos;yield&apos;]</code></pre><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><pre><code>Python中单行注释以 # 开头，实例如下：</code></pre><h3 id="hello-world实例-Python-3-0"><a href="#hello-world实例-Python-3-0" class="headerlink" title="hello world实例(Python 3.0+)"></a>hello world实例(Python 3.0+)</h3><pre><code>#!/usr/bin/python3

# 第一个注释
print(&quot;Hello, Python!&quot;) # 第二个注释</code></pre><p>执行以上代码，输出结果为：</p>
<pre><code>Hello, Python!</code></pre><h3 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h3><p>python最具特色的就是使用缩进来表示代码块，不需要使用大括号 {} 。</p>
<p>缩进的空格数一般是4个。实例如下：</p>
<pre><code>实例(Python 3.0+)
if True:
    print(&quot;True&quot;)
else:
    print(&quot;False&quot;)</code></pre><p>多行语句<br>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠()来实现多行语句，例如：</p>
<pre><code>total = item_one + \
        item_two + \
        item_three</code></pre><p>在 [], {}, 或 () 中的多行语句，不需要使用反斜杠()，例如：</p>
<pre><code>total = [&apos;item_one&apos;, &apos;item_two&apos;, &apos;item_three&apos;,
        &apos;item_four&apos;, &apos;item_five&apos;]</code></pre><h2 id="python数字类型"><a href="#python数字类型" class="headerlink" title="python数字类型"></a>python数字类型</h2><blockquote>
<p>Python3 中有六个标准的数据类型：</p>
<p>Number（数字）<br>String（字符串）<br>List（列表）<br>Tuple（元组）<br>Set（集合）<br>Dictionary（字典）<br>Python3 的六个标准数据类型中：<br>不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元&gt;组）；<br>可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）。</p>
</blockquote>
<h3 id="数字-Number-类型"><a href="#数字-Number-类型" class="headerlink" title="数字(Number)类型"></a>数字(Number)类型</h3><blockquote>
<p>python中数字有四种类型：整数、布尔型、浮点数和复数。</p>
<p>int (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 &gt;python2 中的 Long。<br>bool (布尔), 如 True。<br>float (浮点数), 如 1.23、3E-2<br>complex (复数), 如 1 + 2j、 1.1 + 2.2j</p>
</blockquote>
<h3 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串(String)"></a>字符串(String)</h3><p>python中单引号和双引号使用完全相同。<br>使用三引号(‘’’或”””)可以指定一个多行字符串。</p>
<pre><code>word = &apos;字符串&apos;
sentence = &quot;这是一个句子。&quot;
paragraph = &quot;&quot;&quot;这是一个段落，
可以由多行组成&quot;&quot;&quot;</code></pre><h3 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h3><blockquote>
<p>ist（列表） 是 Python 中使用最频繁的数据类型。</p>
<p>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。</p>
<p>列表是写在方括号 [] 之间、用逗号分隔开的元素列表。</p>
<p>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</p>
<p>列表截取的语法格式如下：</p>
<p>变量[头下标:尾下标]</p>
</blockquote>
<p>实例</p>
<pre><code>#!/usr/bin/python3
list = [ &apos;abcd&apos;, 786 , 2.23, &apos;runoob&apos;, 70.2 ]
tinylist = [123, &apos;runoob&apos;]

print (list)            # 输出完整列表
print (list[0])         # 输出列表第一个元素
print (list[1:3])       # 从第二个开始输出到第三个元素
print (list[2:])        # 输出从第三个元素开始的所有元素
print (tinylist * 2)    # 输出两次列表
print (list + tinylist) # 连接列表</code></pre><p>以上实例输出结果：</p>
<pre><code>[&apos;abcd&apos;, 786, 2.23, &apos;runoob&apos;, 70.2]
abcd
[786, 2.23]
[2.23, &apos;runoob&apos;, 70.2]
[123, &apos;runoob&apos;, 123, &apos;runoob&apos;]
[&apos;abcd&apos;, 786, 2.23, &apos;runoob&apos;, 70.2, 123, &apos;runoob&apos;]</code></pre><h3 id="Tuple（元组）"><a href="#Tuple（元组）" class="headerlink" title="Tuple（元组）"></a>Tuple（元组）</h3><blockquote>
<p>元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在&gt;小括号 () 里，元素之间用逗号隔开。</p>
</blockquote>
<h3 id="Dictionary（字典）"><a href="#Dictionary（字典）" class="headerlink" title="Dictionary（字典）"></a>Dictionary（字典）</h3><blockquote>
<p>字典（dictionary）是Python中另一个非常有用的内置数据类型。</p>
<p>列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字&gt;典当中的元素是通过键来存取的，而不是通过偏移存取。</p>
<p>字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值&gt;(value) 的集合。</p>
<p>键(key)必须使用不可变类型。</p>
<p>在同一个字典中，键(key)必须是唯一的。</p>
</blockquote>
<p>实例</p>
<pre><code>#!/usr/bin/python3        
dict = {}
dict[&apos;one&apos;] = &quot;1 - 菜鸟教程&quot;
dict[2]     = &quot;2 - 菜鸟工具&quot;        
tinydict = {&apos;name&apos;: &apos;runoob&apos;,&apos;code&apos;:1, &apos;site&apos;: &apos;www.runoob.com&apos;}       </code></pre><h3 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h3><blockquote>
<p>集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物&gt;或对象称作元素或是成员。<br>基本功能是进行成员关系测试和删除重复元素。<br>实例</p>
</blockquote>
<pre><code>#!/usr/bin/python3

student = {&apos;Tom&apos;, &apos;Jim&apos;, &apos;Mary&apos;, &apos;Tom&apos;, &apos;Jack&apos;, &apos;Rose&apos;}

print(student)   # 输出集合，重复的元素被自动去掉</code></pre><h3 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h3><p>Python 条件语句是通过一条或多条语句的执行结果（True 或者 False）来决定执行的代码块</p>
<p>如下实例：</p>
<pre><code>#!/usr/bin/python3
var1 = 100
if var1:
    print (&quot;1 - if 表达式条件为 true&quot;)
    print (var1)

var2 = 0
if var2:
    print (&quot;2 - if 表达式条件为 true&quot;)
    print (var2)
print (&quot;Good bye!&quot;)</code></pre><h3 id="Python3-循环语句"><a href="#Python3-循环语句" class="headerlink" title="Python3 循环语句"></a>Python3 循环语句</h3><p>Python中的循环语句有 for 和 while。<br>实例</p>
<pre><code>#!/usr/bin/env python3      
n = 100        
sum = 0
counter = 1
while counter &lt;= n:
    sum = sum + counter
    counter += 1       
print(&quot;1 到 %d 之和为: %d&quot; % (n,sum))</code></pre><h2 id="模块的导入-import-与-from…import"><a href="#模块的导入-import-与-from…import" class="headerlink" title="模块的导入 import 与 from…import"></a>模块的导入 import 与 from…import</h2><p>在 python 用 import 或者 from…import 来导入相应的模块。</p>
<p>将整个模块(somemodule)导入，格式为： import somemodule</p>
<p>从某个模块中导入某个函数,格式为： from somemodule import somefunction</p>
<p>从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc, thirdfunc</p>
<p>将某个模块中的全部函数导入，格式为： from somemodule import *</p>
<p>导入 sys 模块</p>
<pre><code>import sys
print(&apos;================Python import mode==========================&apos;);
print (&apos;命令行参数为:&apos;)
for i in sys.argv:
    print (i)
print (&apos;\n python 路径为&apos;,sys.path)</code></pre><h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><p>很多程序可以执行一些操作来查看一些基本信息，Python可以使用-h参数查看各参数帮助信息：</p>
<pre><code>$ python -h
usage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...
Options and arguments (and corresponding environment variables):
-c cmd : program passed in as string (terminates option list)
-d     : debug output from parser (also PYTHONDEBUG=x)
-E     : ignore environment variables (such as PYTHONPATH)
-h     : print this help message and exit

[ etc. ]</code></pre><p>我们在使用脚本形式执行 Python 时，可以接收命令行输入的参数，具体使用可以参照 Python 3 命令行参数。</p>
<h2 id="运维技巧"><a href="#运维技巧" class="headerlink" title="运维技巧"></a>运维技巧</h2><h3 id="简单http服务器"><a href="#简单http服务器" class="headerlink" title="简单http服务器"></a>简单http服务器</h3><p>python2（centos默认版本）</p>
<pre><code>python -m SimpleHTTPServer 8888 .</code></pre><p>其中8888为需要暴露的端口号，.为当前目录,该http服务器只能访问，不能写入。</p>
<p>python3</p>
<pre><code>python3 -m http.server 9999 &gt;/dev/null 2&gt;&amp;1 &amp;</code></pre><h3 id="json-文件解析输出"><a href="#json-文件解析输出" class="headerlink" title="json 文件解析输出"></a>json 文件解析输出</h3><pre><code>echo &apos;{&quot;name&quot;: &quot;lucy&quot;, &quot;age&quot;: &quot;18&quot;}&apos; | python -m json.tool
or:
python -m json.tool somejson.txt</code></pre><h3 id="linux用户密码验证"><a href="#linux用户密码验证" class="headerlink" title="linux用户密码验证"></a>linux用户密码验证</h3><blockquote>
<p>crypt 模块(只用于 Unix)实现了单向的 DES 加密, Unix 系统使用这个加密算法来储存密码, 这个模块真正也就只在检查这样的密码时有用.<br>如下实例 展示了如何使用 crypt.crypt 来加密一个密码, 将密码和 salt组合起来然后传递给函数, 这里的 salt 包含两位随机字符.现在你可以扔掉原密码而只保存加密后的字符串了.</p>
</blockquote>
<p>实例</p>
<pre><code># /usr/bin/python
# -*- coding:utf-8 -*-

import crypt
import random,string

def getsalt(chars = string.letters+string.digits):
    return random.choice(chars)+random.choice(chars)

salt = getsalt()
print salt
print crypt.crypt(&apos;bananas&apos;,salt)

命令行使用：
python -c &quot;import crypt;print(crypt.crypt(&apos;123456&apos;))&quot;
输出：
$6$PiqwS47AEB/oYsFW$Yy/EVqRqazmYwJqGYQukJMHepuHWYLkqX8b10XN6VPftmUAhHFMkA8aRkMCVINBEGsLEes3JQ4TRDny/DBhfL1</code></pre><h2 id="其他常用标准库"><a href="#其他常用标准库" class="headerlink" title="其他常用标准库"></a>其他常用标准库</h2><p>官方参考 <a href="https://docs.python.org/zh-cn/3/library/index.html" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/index.html</a></p>
<ul>
<li>os — 操作系统接口模块</li>
<li>os.path — 常见路径操作</li>
<li>sys — 系统相关的参数和函数</li>
<li>time — 时间的访问和转换</li>
<li>datetime — 基础 日期 和 时间 数据类型</li>
<li>re  — 正则表达式操作</li>
<li>gzip — 对 gzip 格式的支持</li>
<li>threading — 基于线程的并行</li>
<li>multiprocessing — 基于进程的并行</li>
<li>asyncio — 异步 I/O</li>
<li>socket — 底层网络接口</li>
<li>email — 电子邮件与 MIME 处理包</li>
<li>json — JSON 编码和解码器</li>
<li>base64 — Base16, Base32, Base64, Base85 数据编码</li>
<li>urllib — URL 处理模块</li>
<li>urllib.request — 用于打开 URL 的可扩展库</li>
</ul>
]]></content>
      <categories>
        <category>培训</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
